generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitAPI"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @unique
  fullName           String
  email              String?
  phone              String?
  adminId            String?
  admin              User?                @relation("AdminToUsers", fields: [adminId], references: [id], onDelete: Cascade)
  adminedUsers       User[]               @relation("AdminToUsers") // ‚Üê users managed by this user
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  account            Account?
  orders             Order[]
  transfers          Transfered[]
  transactions       Transaction[]
  TransactionBalance TransactionBalance[]
}

model Transfered {
  id        String   @id @unique
  amount    Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}

model Account {
  id        String   @id @unique
  username  String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                 String             @id @unique
  orderNumber        String
  orderDate          DateTime           @default(now())
  statusChangeDate   DateTime?
  SKU                String
  size               String
  deposit            Float
  totalPrice         Float
  deliveryCode       String
  deliveryCodeStatus DeliveryCodeStatus @default(PENDING)
  shippingFee        Float
  secondShippingFee  Float
  checkBox           Boolean            @default(false)
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  source             Source             @relation(fields: [sourceId], references: [id], onDelete: Cascade)
  shippingStore      ShippingStore      @relation(fields: [shippingStoreId], references: [id], onDelete: Cascade)
  userId             String
  sourceId           String
  shippingStoreId    String
  status             OrderStatus        @default(ONGOING)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
}

model Transaction {
  id              String          @id @unique
  amount          Float
  rate            Float
  type            TransactionType
  nature          NatureType
  description     String?
  userId          String?
  user            User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  adminId         String?
  transactionDate DateTime        @default(now())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Source {
  id        String   @id @unique
  name      String
  color     String   @default("#FFFFFF") // Adding a color field with a default value
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model ShippingStore {
  id        String   @id @unique
  name      String
  address   String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model TransactionBalance {
  id        String   @id @unique
  dateTime  DateTime @default(now())
  data      String
  adminId   String?
  admin     User?    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Backup {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  adminId   String?
}

enum Role {
  SUPER_ADMIN
  ADMIN
  STAFF
  USER
}

enum OrderStatus {
  ONGOING
  LANDED
  SHIPPED
  CANCELLED
}

enum DeliveryCodeStatus {
  PENDING
  EXIST
  DELIVERD
}

enum TransactionType {
  BUY_CN
  SELL_CN
  BUY_PP
  CANCELLED
}

enum NatureType {
  IN
  OUT
}
